spring.datasource.url=jdbc:postgresql://localhost:5432/order_service
spring.datasource.username=postgres
spring.datasource.password=160800Rus
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
server.port=8085
server.error.include-message=always

eureka.client.serviceUrl.defaultZone=http://eureka:password@localhost:8761/eureka
#url по которому можем найти дискавери сервер

#включаем circuitbreakers
management.health.circuitbreakers.enabled=true
management.endpoint.web.exposure.include=*

#показывать все детали о работоспособности сервиса
management.endpoint.health.show-details=always

spring.application.name=order-service
#имя для сервера eureka
#можно зайти в панель управления localhost:8761 и посмотреть все подлюченные микросервисы



#Resilinece4j Properties

## У резервного варианта есть три состояния:
# закрытое - когда основной сервис работает штатно, запасной не работает
# открытое - когда основной сервис перестал работать, тогда включается резервный вариант
# полуоткрытое - когда основной сервис снова начал работу, резервный перестает работать и включает полуоткрытое состояние, ждет например три успешных запроса на основной сервис и меняет состояние на закрытое  (resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3)

## Регистрируем индикатор, который отслеживает работоспособность сервиса
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

## Размер буфера
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

## Говорим что бы не изменял состояние сразу, а сначала сделал 5 последовательных запросов подряд и если все они оказались неудачными то только после этого он изменит состояние b drk.xbn fdfhbqysq ht;bv
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED

## Количество запросов которые будут сделаны перед тем как перейти в аварийный режим
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

## Количество процентов неудачных запросов, в данном случае установили 50%, после которых включится аварийный режим
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

## Время которое будет ждать в открытом состоянии
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

## После того как ошибка была устранена и основной сервис включился, включается полуоткрытое состояние и резервный вариант находится нп низком старте,
# но работает уже основной и только после трех успешных запросов к основному сервису, закрывается полуоткрытое состояние и включается закрытое
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3

## Включили автоматический режим перехода из открытого состояния в полуоткрытое, (в полуоткрытое состояние резервный вариант переходит после того как основной снова начал работу)
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true



## Время которое мы ждем ответа и по истечение которого включается резервный вариант (например при медленном сетевом соединение)
resilience4j.circuitbreaker.instances.inventory.timeout-duration=3s






#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/order_service
#spring.datasource.username=root
#spring.datasource.password=root
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver





## Локальный хост нашего сервиса по отслеживанию запросов, можно зайти и проверить каждый запрос
spring.zipkin.baseUrl=http://localhost:9411

##Данное свойство говорит о том, что мы хотим отслеживать все 100% запросов поступающих к нашим сервисам (=1.0)
spring.sleuth.sampler.probability=1.0


### Kafka properties
spring.kafka.bootstrap-servers=http://localhost:9092

#Тема по умолчанию для всех сообщений при создании заказа
spring.kafka.template.default-topic=notificationTopic

#Указываем спрингбуту как сериализовать(сохранить) объект и отправить брокеру Kafka  // данный сервис является продюсером (поставщиком) данных (producer.key-serializer)
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer

#Что бы иметь возможность преобразить простой JAVA объект POJO в объект JSON, добавим следующие свойства для serializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer


#Указываем путь до нужного файла (поставщик)
spring.kafka.producer.properties.spring.json.type.mapping=event:DKG.ORDER_SERVICE.event.OrderPlacedEvent